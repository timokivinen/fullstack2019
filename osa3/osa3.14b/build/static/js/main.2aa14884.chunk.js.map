{"version":3,"sources":["components/Filter.js","services/PersonService.js","components/Person.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","value","handleChange","onChange","baseUrl","axios","get","then","response","data","newObject","post","id","console","log","request","put","delete","Person","props","name","toUpperCase","startsWith","filter","number","onClick","e","respData","personService","setErrorMessage","setTimeout","setPersons","persons","person","DeleteItem","Persons","p_persons","p_setPersons","p_filter","newFilter","map","deletePerson","Notification","message","className","App","useState","newName","setNewName","newNumber","setNewNumber","setNewFilter","errorMessage","useEffect","initialPersons","event","target","onSubmit","preventDefault","pos","findIndex","window","confirm","personObject","returnedPerson","catch","error","errmsg","includes","concat","type","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2aa14884.chunk.js","sourcesContent":["// --------------------------------------------------------------\r\n// --- Component:   Filter\r\n// --- Purpose:     f\r\n// --- Date:        8.5.2019 Timo Kivinen\r\n// ---\r\n// --------------------------------------------------------------\r\nimport React from 'react'\r\n\r\n// ----------------------------------------------\r\n// ---\r\n// ----------------------------------------------\r\nconst Filter = ({value, handleChange}) => {\r\n    return (\r\n            <div>Rajaa näytettäviä: \r\n                <input value={value} onChange={handleChange}/>\r\n            </div>\r\n    )\r\n  }\r\n  export default Filter","// --------------------------------------------------------------\r\n// --- Name:    PersonService.js\r\n// --- Purpose: Tietokanta-operaatiot\r\n// --- Date:    21.5.2017 Timo Kivinen\r\n// ---          LOCAL VERSION!!\r\n// --------------------------------------------------------------\r\nimport axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n// const baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  console.log('*Personservice upd: url ', baseUrl)\r\n  console.log('*Personservice upd: id ', id)\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  // --- return request.then(response => response.data)\r\n  console.log(`Personservice put: ${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update, deletePerson}\r\n","// --------------------------------------------------------------\r\n// --- Component:   Person\r\n// --- Purpose:     Yksittäisen henkilön renderöivä komponentti\r\n// ---              Muodostetaan delete-nappi\r\n// --- Date:        25.5.2019 Timo Kivinen\r\n// --- Fixes:       13.8.2019      \r\n// --------------------------------------------------------------\r\nimport React from 'react'\r\nimport personService from '../services/PersonService'\r\n\r\n// --------------------------------------------------------------\r\n// --- Poistetaan rivi\r\n// --- Palautetaan kaikki muut rivit paitsi poistettava (filterillä)\r\n// --------------------------------------------------------------\r\nconst DeleteItem = (props) => {\r\n  const respData = personService.deletePerson(props.id)\r\n  console.log('***respData: ', respData)\r\n\r\n  props.setErrorMessage(`Henkilö  '${props.name}' on poistettu.`)\r\n\r\n  setTimeout(() => {\r\n      props.setErrorMessage(null)\r\n  }, 3000)\r\n\r\n  // --- Palautetaan kaikki muut rivit paitsi parametrina oleva rivi\r\n  props.setPersons(props.persons.filter(person => {\r\n      return person.id !== props.id\r\n  }))\r\n}\r\n\r\n// --------------------------------------------------------------\r\n// --- Person-komponentti\r\n// --- - listataan rivit, joiden alku noudattaa filtterin toivetta\r\n// --- - palautetaan tyhjä, jos riviä ei tulosteta listalle\r\n// --------------------------------------------------------------\r\nconst Person = (props) => {\r\n  if (props.name.toUpperCase().startsWith(props.filter.toUpperCase()) ||  props.filter === '') {\r\n      return (\r\n          <div>{props.name}&nbsp;&nbsp;{props.number} &nbsp;&nbsp;\r\n              <button onClick={(e)=>DeleteItem(props)}>\r\n                  Delete\r\n              </button>   \r\n          </div> \r\n      )\r\n  }\r\n  return ('')      \r\n}\r\n\r\nexport default Person\r\n","\r\n// --------------------------------------------------------------\r\n// --- Persons-komponentti\r\n// --- \r\n// --- 21.5.2019 Timo Kivinen\r\n// --------------------------------------------------------------\r\nimport React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Persons = (props) => {\r\n    const p_persons=props.persons\r\n    const p_setPersons=props.setPersons\r\n    const p_filter=props.newFilter\r\n    // ---------------------------------------------------\r\n    // --- Kaikki rivit\r\n    // ---------------------------------------------------    \r\n    const rows_all = () => p_persons.map(person =>\r\n        <Person\r\n        name={person.name}\r\n        number={person.number}\r\n        id={person.id}        \r\n        filter={p_filter}\r\n        persons={p_persons}\r\n        setPersons={p_setPersons}\r\n        deletePerson={props.deletePerson}        \r\n        setErrorMessage={props.setErrorMessage}\r\n        />\r\n    )\r\n    return rows_all()\r\n }\r\n export default Persons","// --------------------------------------------------------------\r\n// --- Component:   Notification\r\n// --- Purpose:     f\r\n// --- Date:        25.5.2019 Timo Kivinen\r\n// ---\r\n// --------------------------------------------------------------\r\nimport React from 'react'\r\n\r\n\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification  ","// --------------------------------------------------------------------------\r\n// --- Tehtävä          3.13: puhelinluettelo ja tietokanta, step1\r\n// ---                  Front End \r\n// --- Pvm:             30.8.2019 Timo Kivinen\r\n// ---                  \r\n// --------------------------------------------------------------------------\r\nimport React, { useState, useEffect } from 'react'\r\nimport Filter from './components/Filter'\r\nimport Persons from './components/Persons'\r\nimport Notification from './components/Notification'\r\nimport personService from './services/PersonService'\r\n\r\n\r\n// -------------------------------------------------------------------------\r\n// --- APP\r\n// -------------------------------------------------------------------------\r\nconst App = (props) => {\r\n\r\n  const [ persons, setPersons] = useState([]) \r\n  const [ newName, setNewName ] = useState('qwerty')\r\n  const [ newNumber, setNewNumber ] = useState('1234567890')\r\n  const [ newFilter, setNewFilter ] = useState('')\r\n\r\n  const [errorMessage, setErrorMessage] = useState('')\r\n  // -------------------------------------------------------------------------\r\n  // --- Editoiminen on mahdollista, kun rekisteröidään tapahtumankäsittelijä\r\n  // -------------------------------------------------------------------------\r\n  const handleNameChange = (event) => {\r\n      // console.log('handle:', event.target.value)\r\n    setNewName(event.target.value)\r\n  }\r\n  // -------------------------------------------------------------------------\r\n  // --- Editoiminen on mahdollista, kun rekisteröidään tapahtumankäsittelijä\r\n  // -------------------------------------------------------------------------\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n  // -------------------------------------------------------------------------\r\n  // --- Editoiminen on mahdollista, kun rekisteröidään tapahtumankäsittelijä\r\n  // -------------------------------------------------------------------------\r\n  const handleFilterChange = (event) => {\r\n    setNewFilter(event.target.value)\r\n  }\r\n  // ---------------------------------------------------\r\n  // --- EFFECT HOOK\r\n  // ---------------------------------------------------\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n        .then(initialPersons => {\r\n        setPersons(initialPersons)\r\n      })\r\n  }, [])          \r\n  \r\n  // --------------------------------------------------------------\r\n  // --- addPerson - Henkilön ja puhelinnumeron lisäys\r\n  // --------------------------------------------------------------\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n    // --- Löytyykö nimi jo listalta?\r\n    const pos = persons.findIndex(person => person.name.toUpperCase() === newName.toUpperCase())\r\n    if (pos > -1) {\r\n      if (!window.confirm(`${newName} on jo luettelossa, korvataanko numero?`)) {\r\n        // ---------------------------------------------------\r\n        // --- Hylätään tapahtuma\r\n        // ---------------------------------------------------\r\n        setErrorMessage(`Tapahtuma on hylätty.`)\r\n        setTimeout(() => { setErrorMessage(null) }, 3000)\r\n        return 0\r\n      }\r\n      else {\r\n        // ---------------------------------------------------\r\n        // --- PUHELINNUMERON PÄIVITYS\r\n        // ---------------------------------------------------\r\n        console.log('*AddPerson --- 1 pos: ', pos)\r\n        console.log('*AddPerson --- 2 id: ', persons[pos].id)\r\n        console.log('*AddPerson --- 3 person: ', persons[pos])\r\n        const personObject = {\r\n          name: newName,\r\n          number: newNumber,\r\n        }\r\n\r\n        personService\r\n          .update(persons[pos].id, personObject)\r\n          .then(returnedPerson => {\r\n            // --- Renderöidään lista\r\n            setPersons(persons.map(person => person.id !== persons[pos].id ? person : returnedPerson))\r\n            setErrorMessage(`Puhelinnumero on päivitetty. uuusi numero on '${newNumber}' `)\r\n          })\r\n          .catch(error => {\r\n            let errmsg = `Puhelinnumeron päivitys epäonnistui.  `\r\n            if(error.message.includes('404')) {\r\n              errmsg = errmsg.concat('Asiakas on jo poistettu!!')\r\n            }\r\n            setErrorMessage(errmsg)\r\n          })\r\n          \r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 3000)\r\n          \r\n        }\r\n    }\r\n    else {\r\n        // ---------------------------------------------------\r\n        // --- Nimeä ei löytynyt listalta\r\n        // --- UUSI HENKILÖ+PUHELINNUMERO\r\n        // ---------------------------------------------------\r\n        const personObject = {\r\n          name: newName,\r\n          number: newNumber,\r\n        }\r\n        // --- Käytetään uuden rivin luomiseen service-kenttää \"create\"\r\n        personService\r\n          .create(personObject)\r\n          .then(returnedPerson => {\r\n            setPersons(persons.concat(returnedPerson))\r\n//            setNewName('')\r\n          })\r\n          setErrorMessage(`uusi henkilö lisätty.`)\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 3000)\r\n\r\n        }\r\n  console.log('*AddPerson --- END')\r\n  \r\n  } // -- AddPerson\r\n\r\n  const deletePerson = (p) => {\r\n    console.log('DELETEPERSON:', p)\r\n  }\r\n\r\n  // ---------------------------------------------------\r\n  // --- RETURN\r\n  // ---------------------------------------------------\r\n  return (\r\n        <div>\r\n        <h2>Puhelinluettelo</h2>\r\n\r\n        <Notification message={errorMessage} />\r\n\r\n        <div>\r\n            <Filter value={newFilter} handleChange={handleFilterChange}/>\r\n        </div>\r\n\r\n        <h3>Lisää uusi</h3>\r\n        \r\n        <form onSubmit={addPerson}>\r\n          <div>nimi: <input value={newName} onChange={handleNameChange}/></div>\r\n          <div>numero:<input value={newNumber} onChange={handleNumberChange}/></div>\r\n          <div><button type=\"submit\">lisää</button></div>\r\n                 \r\n        </form>\r\n\r\n        <h2>Numerot</h2>\r\n       \r\n        <Persons persons={persons} newFilter={newFilter} setPersons={setPersons} setErrorMessage={setErrorMessage} \r\n              deletePerson={deletePerson}/>\r\n        </div>\r\n      )\r\n  }\r\n\r\n  export default App\r\n","// --------------------------------------------------------------------------\n// --- Tehtävä          3.13f\n// --- Pvm:             22.6.2019 Timo Kivinen\n// ---                  \n// --- Aikaa käytetty:  3 h\n// --------------------------------------------------------------------------\n// --- Projektin luonti:    npx create-react-app xxx\n// --- Axios install:       npm install axios\n// --------------------------------------------------------------------------\n// --- 1) Back end:         app.use(express.static('build'))\n// --- 2) Front end:        baseUrl = /aaa/bbb\n// --- 3) Production build  npm run build (Front End)\n// --- 4) Copy frontend Build dir to backend dir\n// --- 5) Test local        localhost:3001  (npm start back end)\n// --- 5) Back End          git init, git add build..., git commit, git push heroku master\n// --- \n// --------------------------------------------------------------------------\n// --- git add .gitignore build index.js package-lock.json package.json Procfile requests\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}